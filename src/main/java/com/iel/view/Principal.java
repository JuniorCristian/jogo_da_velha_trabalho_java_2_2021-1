/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.iel.view;

import java.util.Random;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import javax.swing.*;

/**
 *
 * @author cristian
 */
public class Principal extends javax.swing.JFrame {

    public final int QTD_NOME_MAQUINA = 16;

    public int tamTab = 3;
    public String[] nomes = new String[QTD_NOME_MAQUINA];
    public boolean qmJoga;
    public String[] arrayJogo;
    public JButton[] listaBotao;
    public boolean contraPC = false;
    public String pecaPC = "O";
    public boolean primeiroJogo = true;

    public Principal() {
        initComponents();
        nomes[1] = "Magalu";
        nomes[2] = "BIA";
        nomes[3] = "Mudae";
        nomes[4] = "Bahianinho.old";
        nomes[5] = "SkyNet";
        nomes[6] = "CB";
        nomes[7] = "Pedro";
        nomes[8] = "Garoto de Programa";
        nomes[9] = "Craudo";
        nomes[10] = "Megumin";
        nomes[11] = "NatNatu";
        nomes[12] = "Google Assistent";
        nomes[13] = "Siri";
        nomes[14] = "Alexa";
        nomes[15] = "Whatson";
        qmJoga = true;
        geraJogoPvp();
        primeiroJogo = false;
        botoes.setLayout(new GridLayout(tamTab, tamTab));
        geraTab(tamTab);
        if (pecaPC == "X" && contraPC) {
            movimentoPC();
        }

    }

    public void resetaJogo() {
        resetaTab();
        lblPonto1.setText("0");
        lblPonto2.setText("0");
    }

    public void geraJogoPvp() {
        if (!primeiroJogo) {
            resetaJogo();
        }
        lblJogador1.setText(pegaNome("Jogador 1"));
        lblJogador2.setText(pegaNome("Jogador 2"));
        contraPC = false;
    }

    public void geraJogoPvm() {
        resetaJogo();
        Random nomeM = new Random();
        nomes[0] = pegaNome("Jogador");
        lblJogador1.setText(nomes[0]);
        lblJogador2.setText(nomes[nomeM.nextInt(QTD_NOME_MAQUINA - 1)]);
        contraPC = true;
    }

    public String pegaNome(String jogador) {
        String nomeJ = JOptionPane.showInputDialog(this, "Insira o nome do " + jogador, "Nome do jogador", JOptionPane.INFORMATION_MESSAGE);
        if (nomeJ == null || nomeJ.isEmpty()) {

            nomeJ = pegaNome(jogador);
        }
        return nomeJ;
    }

    public int geraModoDoente() {
        String qtdDoente = JOptionPane.showInputDialog(this, "Digite o tamanho do tabuleiro(A partir de 3: 3 = 3x3, 4 = 4x4...)", "Tamanho tabuleiro", JOptionPane.INFORMATION_MESSAGE);
        int qtdDoenca;
        try {
            qtdDoenca = Integer.parseInt(qtdDoente);
            if (qtdDoenca < 3) {
                qtdDoenca = geraModoDoente();
            }
        } catch (Exception e) {
            qtdDoenca = geraModoDoente();
        }
        botoes.removeAll();
        tamTab = qtdDoenca;
        botoes.setLayout(new GridLayout(tamTab, tamTab));
        return qtdDoenca;
    }

    public void geraTab(int tamTab) {
        arrayJogo = null;
        listaBotao = null;
        arrayJogo = new String[tamTab * tamTab];
        listaBotao = new JButton[tamTab * tamTab];
        int valBtn = 0;
        for (int i = 0; i < tamTab; i++) {
            for (int j = 0; j < tamTab; j++) {
                valBtn = tamTab * i + j;
                listaBotao[valBtn] = new JButton();
                listaBotao[valBtn].setFont(new Font("Arial", Font.PLAIN, 150 / tamTab));
                listaBotao[valBtn].setPreferredSize(new Dimension(615 / tamTab, 615 / tamTab));
                int finalI = i;
                int finalJ = j;
                int finalValBtn = valBtn;
                listaBotao[valBtn].addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        viraBotao(listaBotao[finalValBtn], finalValBtn);
                    }
                });
                botoes.add(listaBotao[valBtn]).setLocation(i, j);
            }
        }
        botoes.validate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblJogador1 = new javax.swing.JLabel();
        lblJogador2 = new javax.swing.JLabel();
        lblPonto1 = new javax.swing.JLabel();
        lblPonto2 = new javax.swing.JLabel();
        botoes = new javax.swing.JPanel();
        lblAtaul = new javax.swing.JLabel();
        mnuBar = new javax.swing.JMenuBar();
        mnuJogo = new javax.swing.JMenu();
        mnuPvp = new javax.swing.JMenuItem();
        mnuPvm = new javax.swing.JMenuItem();
        mnuMdoente = new javax.swing.JMenuItem();
        mnuSob = new javax.swing.JMenu();
        mnuSobre = new javax.swing.JMenuItem();
        mnuSair = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblJogador1.setFont(new java.awt.Font("Fira Sans Semi-Light", 0, 18)); // NOI18N
        lblJogador1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblJogador1.setText("Jogador 1");

        lblJogador2.setFont(new java.awt.Font("Fira Sans Semi-Light", 0, 18)); // NOI18N
        lblJogador2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblJogador2.setText("Jogador 2");

        lblPonto1.setFont(new java.awt.Font("Fira Sans Semi-Light", 0, 25)); // NOI18N
        lblPonto1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPonto1.setText("0");

        lblPonto2.setFont(new java.awt.Font("Fira Sans Semi-Light", 0, 25)); // NOI18N
        lblPonto2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPonto2.setText("0");

        javax.swing.GroupLayout botoesLayout = new javax.swing.GroupLayout(botoes);
        botoes.setLayout(botoesLayout);
        botoesLayout.setHorizontalGroup(
            botoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 615, Short.MAX_VALUE)
        );
        botoesLayout.setVerticalGroup(
            botoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 615, Short.MAX_VALUE)
        );

        lblAtaul.setFont(new java.awt.Font("Fira Sans Semi-Light", 0, 25)); // NOI18N
        lblAtaul.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAtaul.setText("X");

        mnuJogo.setText("Novo Jogo");

        mnuPvp.setText("P.v.P.");
        mnuPvp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPvpActionPerformed(evt);
            }
        });
        mnuJogo.add(mnuPvp);

        mnuPvm.setText("P.v.M.");
        mnuPvm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPvmActionPerformed(evt);
            }
        });
        mnuJogo.add(mnuPvm);

        mnuMdoente.setText("Modo Doente");
        mnuMdoente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuMdoenteActionPerformed(evt);
            }
        });
        mnuJogo.add(mnuMdoente);

        mnuBar.add(mnuJogo);

        mnuSob.setText("Sobre");

        mnuSobre.setText("Sobre");
        mnuSobre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSobreActionPerformed(evt);
            }
        });
        mnuSob.add(mnuSobre);

        mnuSair.setText("Sair");
        mnuSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSairActionPerformed(evt);
            }
        });
        mnuSob.add(mnuSair);

        mnuBar.add(mnuSob);

        setJMenuBar(mnuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(lblJogador1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblPonto1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 90, Short.MAX_VALUE)
                .addComponent(lblAtaul, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                .addComponent(lblPonto2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblJogador2, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(botoes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblJogador2, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                        .addComponent(lblPonto2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(lblPonto1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblJogador1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblAtaul, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82, Short.MAX_VALUE)
                .addComponent(botoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnuSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSairActionPerformed
        this.dispose();
    }//GEN-LAST:event_mnuSairActionPerformed

    private void mnuSobreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSobreActionPerformed
        JOptionPane.showMessageDialog(this, "Este é um jogo da velha dinamico, que vai de tabuleiro 3x3 até o quanto o monitor e a RAM aguentar. \nFeito por Cristian Robert e Douglas Morona", "Sobre", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_mnuSobreActionPerformed

    private void mnuPvpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPvpActionPerformed
        geraJogoPvp();
    }//GEN-LAST:event_mnuPvpActionPerformed

    private void mnuPvmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPvmActionPerformed
        geraJogoPvm();
    }//GEN-LAST:event_mnuPvmActionPerformed

    private void mnuMdoenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuMdoenteActionPerformed
        geraTab(geraModoDoente());
    }//GEN-LAST:event_mnuMdoenteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("GTK+".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    public void viraBotao(JButton botao, int valorBotao) {
        String valorJogador = "";
        if (botao.getText() == "" && botao.getText() != "X" && botao.getText() != "O") {
            valorJogador = lblAtaul.getText();
            if (qmJoga) {
                lblAtaul.setText("O");
                lblJogador1.setFont(new Font("", Font.PLAIN, 18));
                lblJogador2.setFont(new Font("", Font.BOLD, 18));
            } else {
                lblAtaul.setText("X");
                lblJogador1.setFont(new Font("", Font.BOLD, 18));
                lblJogador2.setFont(new Font("", Font.PLAIN, 18));
            }
            qmJoga = !qmJoga;
            botao.setText(valorJogador);
            arrayJogo[valorBotao] = valorJogador;
            if (verificaVitoria(valorJogador)) {
                String jogador;
                if (valorJogador == "X") {
                    jogador = lblJogador1.getText();
                    lblPonto1.setText("" + (Integer.parseInt(lblPonto1.getText()) + 1));
                } else {
                    jogador = lblJogador2.getText();
                    lblPonto2.setText("" + (Integer.parseInt(lblPonto2.getText()) + 1));
                }
                Object[] options = {"Sim", "Não"};
                if (JOptionPane.showOptionDialog(this, "Parabéns, o jogador " + jogador + " venceu o jogo, deseja jogar novamente", "VENCEDOR", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]) == JOptionPane.OK_OPTION) {
                    resetaTab();
                } else {
                    this.dispose();
                }
            }
            Object[] options = {"Sim", "Não"};
            if (verificaVelha()) {
                if (JOptionPane.showOptionDialog(this, "Putz, deu velha, vamos jogar de novo?", "VELHA", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[0]) == JOptionPane.OK_OPTION) {
                    resetaTab();
                } else {
                    this.dispose();
                }
            }
            if (contraPC && valorJogador != pecaPC) {
                movimentoPC();
            }
        }
    }

    public void resetaTab() {
        for (int i = 0; i < tamTab * tamTab; i++) {
            arrayJogo[i] = "";
            listaBotao[i].setText("");
        }
        qmJoga = true;
        lblAtaul.setText("X");
    }

    public void movimentoPC() {
        Random botaoPC = new Random();
        int valorPC = botaoPC.nextInt(tamTab * tamTab - 1);
        if (arrayJogo[valorPC] != "X" && arrayJogo[valorPC] != "O") {
            viraBotao(listaBotao[valorPC], valorPC);
        } else {
            movimentoPC();
        }

    }

    public boolean verificaVelha() {
        for (String v : arrayJogo) {
            if (v != "X" && v != "O") {
                return false;
            }
        }
        return true;
    }

    public boolean verificaVitoria(String valorJogador) {
        for (int i = 0; i < tamTab; i++) {
            if (verificaHorizontal(valorJogador, tamTab * i)) {
                return true;
            }
        }
        for (int i = 0; i < tamTab; i++) {
            if (verificaVertical(valorJogador, i)) {
                return true;
            }
        }
        if (verificaDiagonal1(valorJogador)) {
            return true;
        }
        if (verificaDiagonal2(valorJogador)) {
            return true;
        }
        return false;
    }

    public boolean verificaHorizontal(String valorJogador, int valor) {
        for (int i = valor; i < valor + tamTab; i++) {
            if (arrayJogo[i] != valorJogador) {
                return false;
            }
        }
        return true;
    }

    public boolean verificaVertical(String valorJogador, int valor) {
        for (int i = valor; i < Math.pow(tamTab, 2); i += tamTab) {
            if (arrayJogo[i] != valorJogador) {
                return false;
            }
        }
        return true;
    }

    public boolean verificaDiagonal1(String valorJogador) {
        for (int i = 0; i < Math.pow(tamTab, 2); i += tamTab + 1) {
            if (arrayJogo[i] != valorJogador) {
                return false;
            }
        }
        return true;
    }

    public boolean verificaDiagonal2(String valorJogador) {
        for (int i = tamTab - 1; i < Math.pow(tamTab, 2) - (tamTab - 1); i += tamTab - 1) {
            if (arrayJogo[i] != valorJogador) {
                return false;
            }
        }
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel botoes;
    private javax.swing.JLabel lblAtaul;
    private javax.swing.JLabel lblJogador1;
    private javax.swing.JLabel lblJogador2;
    private javax.swing.JLabel lblPonto1;
    private javax.swing.JLabel lblPonto2;
    private javax.swing.JMenuBar mnuBar;
    private javax.swing.JMenu mnuJogo;
    private javax.swing.JMenuItem mnuMdoente;
    private javax.swing.JMenuItem mnuPvm;
    private javax.swing.JMenuItem mnuPvp;
    private javax.swing.JMenuItem mnuSair;
    private javax.swing.JMenu mnuSob;
    private javax.swing.JMenuItem mnuSobre;
    // End of variables declaration//GEN-END:variables
}
